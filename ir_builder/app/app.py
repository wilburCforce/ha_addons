# app.py
from flask import Flask, render_template, request, jsonify
import requests
import json
import os
import logging

# Configure basic logging for the application
logging.basicConfig(level=logging.INFO)
app = Flask(__name__)

# Log the application start
app.logger.info("Starting IR Builder Flask application...")

# We will NOT use the Home Assistant token or API calls in this diagnostic version.
HA_TOKEN = "MOCK_TOKEN" # Use a dummy token to avoid crashes
HEADERS = {}

@app.route('/')
def index():
    """Renders the main page using mock data instead of fetching from the API."""
    app.logger.info("Received request for the home page ('/').")
    
    try:
        app.logger.info("Using mock data to render the page for diagnosis.")
        
        # --- MOCK DATA ---
        broadlink_devices = [
            {'entity_id': 'remote.broadlink_rm4_pro_1'},
            {'entity_id': 'remote.broadlink_mini_2'},
            {'entity_id': 'remote.my_broadlink_device_3'}
        ]
        # --- END MOCK DATA ---
        
        app.logger.info(f"Found {len(broadlink_devices)} Broadlink remote devices (mock data).")

        # Render the HTML template, passing the mock list of devices
        return render_template('index.html', devices=broadlink_devices)
    except Exception as e:
        # Catch any potential rendering errors
        app.logger.error(f"Error rendering the page with mock data: {e}")
        return f"Error rendering the page: {e}", 500

@app.route('/learn_mode', methods=['POST'])
def learn_mode():
    """Mocks the API call to put a device in learning mode."""
    entity_id = request.json.get('entity_id')
    app.logger.info(f"Received request to start learning mode for {entity_id}.")

    if not entity_id:
        return jsonify({'status': 'error', 'message': 'No entity_id provided.'}), 400

    app.logger.info(f"MOCK API call: Activated learning mode for {entity_id}.")
    return jsonify({
        'status': 'success', 
        'message': f'Learning mode activated for {entity_id} (mock). Press a button on your remote.'
    })

@app.route('/generate_yaml', methods=['POST'])
def generate_yaml():
    """Mocks the YAML generation."""
    device_id = request.json.get('device_id')
    command_name = request.json.get('command_name')
    app.logger.info(f"Received request to generate YAML for device {device_id} with command '{command_name}'.")

    if not all([device_id, command_name]):
        return jsonify({'status': 'error', 'message': 'Missing required parameters.'}), 400

    # A simple YAML template for the automation
    yaml_template = f"""
# This YAML was generated by the diagnostic app
- id: 'generated_ir_command_{command_name}'
  alias: 'IR Command - {command_name.replace("_", " ").title()}'
    """
    
    app.logger.info("Successfully generated YAML template (mock).")
    return jsonify({'status': 'success', 'yaml': yaml_template})

if __name__ == '__main__':
    # Ensure the Flask app runs on the correct host and port for Ingress
    app.logger.info("Attempting to run Flask app...")
    app.run(host='0.0.0.0', port=8089, debug=True)
